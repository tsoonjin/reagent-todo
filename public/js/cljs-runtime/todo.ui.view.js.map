{"version":3,"sources":["todo/ui/view.cljs"],"mappings":";AAGA,AAAA,AAAMA,AAAYC;AAAlB,AACE,AAAMG,AAAW,AAAA,AAACC;AAAlB,AAAAH,AACMI;AADN,AACmB,AAAAJ,AAACK,AAAOH;;AAD3B,AAEMI;AAFN,AAEY,AAAA,AAACD,AAAOH;;AAFpB,AAGMK;AAHN,AAGY,AAAMC,AAAa,AAAA,AAAA,AAAAC,AAAKP,AAAeQ;AAAvC,AAAkD,AAAA,AAAQ,AAACC,AAAOH;AAAc,AAACT,AAAAA,AAAAA,AAAOS,AAAAA;;AAAtC;;AAAqD,AAACF;;AAHpH,AAAAL,AAIMW;AAJN,AAImB,AAAAC,AAAAZ;AAAA,AAAA,AAAAY;AAAA;AAAgB,AAACN;;;AAAjB;AAA6B,AAACD;;;AAA9B;AAA6C,AAACA;;;;AAA9C;;;;AAJnB,AAKE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAAK,AAImBZ,AACCK;AALpB,AAMuB,AAACH,AAAY,AAAA,AAAAU;AANpC,AAAA,AAAAC;AAAA,AAOyB,AAACH,AAAY,AAAAG;;;;AAI1C,AAAA,AAAMC,AACHjB;AADH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIGD,AAAWC;;AAEd,AAAA,AAAMkB,AAAWC,AAAKC;AAAtB,AACE,AAAAC,AAAyBF;AAAzBE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcK;AAAd,AAAAD,AAAAJ,AAAA,AAAiBM;AAAjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGYA;AAHZ,AAIiC,AAACP,AAAAA,AAAAA,AAAUM,AAAAA;;;AAI9C,AAAA,AAAME,AAAWC,AAAMT;AAAvB,AACE,AAAMU,AAAM,AAAA,AAAApB,AAACqB,AAAMF;AAAnB,AAAA,AAAA,AAAA,AAAA,AAGE,AAAAG,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAE,AAAAJ;AAAA,AAAAK,AA85E+C,AAAAgB,AAAArB;AA95E/CM,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAA,AAAAK,AAAAN,AAAAK,AAAMxB;AAAN,AAAA,AAAA,AAAA0B,AAAAJ,AAAA,AAAA,AAAA,AAAA,AACQ,AAAA,AAAKtB,AAAQD,AAAUC,AAAKC;;AADpC,AAAA,AAAAuB,AAAA;;;;AAAA;;;;;AAAA,AAAAG,AAAA,AAAAC,AAAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAhB;;AAAA,AAAAa,AAAA,AAAAC,AAAAN,AAAA;;;AAAA,AAAA,AAAAS,AAAAjB,AAAMd;AAAN,AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAAI,AAAAnB,AACQ,AAAA,AAAKd,AAAQD,AAAUC,AAAKC;;;AADpC;;;;AAAA,AAAA;;AAAA,AAAA,AAAAY,AAAWF;;;AAIf,AAAA,AAAMuB;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA","names":["todo.ui.view/todo-input","add-fn","p1__28099#","p1__28100#","input-text","reagent.core.atom","update-text","cljs.core/reset!","stop","save","trimmed-text","cljs.core/deref","clojure.string/trim","cljs.core/empty?","key-pressed","G__28103","p1__28101#","p1__28102#","todo.ui.view/task-entry","todo.ui.view/todo-item","todo","delete-fn","map__28104","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","id","title","todo.ui.view/task-list","todos","items","cljs.core/vals","iter__4529__auto__","s__28107","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__28109","cljs.core/chunk-buffer","i__28108","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__28106","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","todo.ui.view/footer-controls","cljs.core/chunk-first"],"sourcesContent":["(ns todo.ui.view\n  (:require [reagent.core :as r] [clojure.string :as str]))\n\n(defn todo-input [add-fn]\n  (let [input-text (r/atom \"\")\n        update-text #(reset! input-text %)\n        stop #(reset! input-text \"\")\n        save #(let [trimmed-text (-> @input-text str str/trim)] (if-not (empty? trimmed-text) (add-fn trimmed-text)) (stop))\n        key-pressed #(case % \"Enter\" (save) \"Esc\" (stop) \"Escape\" (stop) nil)]\n    (fn []\n      [:input {:class \"new-todo\"\n               :placeholder \"Add todo\"\n               :type \"text\"\n               :value @input-text\n               :on-blur save\n               :on-change #(update-text (.. % -target -value))\n               :on-key-down #(key-pressed (.. % -key))}]\n      )\n    ))\n\n(defn task-entry\n  [add-fn]\n  [:header.header\n  [:h1 \"todos\"]\n  [todo-input add-fn]])\n\n(defn todo-item [todo delete-fn]\n  (let [{:keys [id title]} todo]\n    [:li\n     [:div.view\n      [:label title]\n      [:button.destroy {:on-click #(delete-fn id)}]]]\n    )\n  )\n\n(defn task-list [todos delete-fn]\n  (let [items (vals @todos)]\n  [:section.main\n   [:ul.todo-list\n    (for [todo items]\n     ^{:key (:id todo)} [todo-item todo delete-fn])]]\n  ))\n\n(defn footer-controls []\n  [:footer.footer\n   [:div \"Footer controls\"]])\n\n"]}